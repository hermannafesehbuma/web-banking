import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

export async function GET(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      }
    );

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Fetch user's cards
    const { data: cards, error } = await supabase
      .from('cards')
      .select(
        'id, card_number, card_type, account_id, status, expiry_date, cvv'
      )
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error && error.code !== 'PGRST116') {
      console.error('Error fetching cards:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log(`API: Fetched ${cards?.length || 0} cards for user ${user.id}`);

    return NextResponse.json({ cards: cards ?? [] });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      }
    );

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { card_type, account_id } = body;

    if (!card_type) {
      return NextResponse.json(
        { error: 'Card type required' },
        { status: 400 }
      );
    }

    // Create new card (card details auto-generated by trigger)
    const { data: newCard, error: insertError } = await supabase
      .from('cards')
      .insert({
        user_id: user.id,
        account_id: account_id || null,
        card_type,
        status: 'active',
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating card:', insertError);
      return NextResponse.json({ error: insertError.message }, { status: 500 });
    }

    console.log('API: Created new card:', newCard);

    return NextResponse.json({ card: newCard });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
