import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

export async function GET(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      }
    );

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('API: Fetching cards for user:', user.id);

    // Fetch user's cards
    const { data: cards, error } = await supabase
      .from('cards')
      .select('id, card_number, card_type, expiry_date, cvv')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    console.log('API: Cards fetch result:', { cards, error });

    if (error && error.code !== 'PGRST116') {
      console.error('Error fetching cards:', error);
      // Return empty array instead of 500 error if table doesn't exist
      return NextResponse.json({ cards: [] });
    }

    console.log(`API: Successfully fetched ${cards?.length || 0} cards`);

    return NextResponse.json({ cards: cards ?? [] });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      }
    );

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { card_type } = body;

    if (!card_type) {
      return NextResponse.json(
        { error: 'Card type required' },
        { status: 400 }
      );
    }

    console.log('API: Creating card for user:', user.id, 'type:', card_type);

    // Check if user already has this card type
    const { data: existingCards, error: checkError } = await supabase
      .from('cards')
      .select('id')
      .eq('user_id', user.id)
      .eq('card_type', card_type)
      .limit(1);

    if (checkError) {
      console.error('Error checking existing cards:', checkError);
    }

    if (existingCards && existingCards.length > 0) {
      console.log('API: User already has a', card_type, 'card');
      return NextResponse.json(
        {
          error: `You already have a ${card_type} card. Each user can request only 1 debit, 1 credit, and 1 prepaid card.`,
        },
        { status: 400 }
      );
    }

    // Create new card (card details auto-generated by trigger)
    const { data: newCard, error: insertError } = await supabase
      .from('cards')
      .insert({
        user_id: user.id,
        card_type,
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating card:', insertError);
      return NextResponse.json({ error: insertError.message }, { status: 500 });
    }

    console.log('API: Created new card:', newCard);

    // Create alert for card creation
    const { error: alertError } = await supabase.from('alerts').insert({
      user_id: user.id,
      type: 'general',
      title: 'New card requested',
      message: `Your physical ${card_type} card has been requested and will be shipped to your address within 5-7 business days.`,
      severity: 'success',
      is_read: false,
    });

    if (alertError) {
      console.error('Error creating alert:', alertError);
    } else {
      console.log('API: Alert created for card request');
    }

    // Send email notification
    try {
      const { data: userData } = await supabase
        .from('bank_users')
        .select('email, full_name, address')
        .eq('id', user.id)
        .single();

      if (userData) {
        await fetch(
          `${process.env.NEXT_PUBLIC_APP_URL}/api/emails/card-request`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              email: userData.email,
              userName: userData.full_name,
              cardType: card_type,
              deliveryAddress: userData.address || 'Your registered address',
            }),
          }
        );
      }
    } catch (emailError) {
      console.error('Failed to send card request email:', emailError);
    }

    return NextResponse.json({ card: newCard });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
