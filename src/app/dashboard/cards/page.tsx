'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/SupbaseClient';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import {
  Plus,
  Lock,
  Eye,
  EyeOff,
  CreditCard as CreditCardIcon,
  Wallet,
  Send,
} from 'lucide-react';
import { DashboardNav } from '@/components/dashboard-nav';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { useToast } from '@/components/ui/simple-toast';

type BankCard = {
  id: string;
  card_number: string;
  card_type: 'debit' | 'credit';
  account_id: string;
  status: 'active' | 'frozen' | 'cancelled';
  expiry_date: string;
  cvv: string;
};

export default function CardsPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [loading, setLoading] = useState(true);
  const [cards, setCards] = useState<BankCard[]>([]);
  const [showCardNumbers, setShowCardNumbers] = useState<{
    [key: string]: boolean;
  }>({});
  const [requestDialogOpen, setRequestDialogOpen] = useState(false);
  const [selectedCardType, setSelectedCardType] = useState<
    'debit' | 'credit' | 'prepaid' | null
  >(null);
  const [requesting, setRequesting] = useState(false);

  useEffect(() => {
    loadCards();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const loadCards = async () => {
    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
      router.replace('/auth/login');
      return;
    }

    // Fetch cards from database
    const { data: cardsData, error } = await supabase
      .from('cards')
      .select(
        'id, card_number, card_type, account_id, status, expiry_date, cvv'
      )
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error && error.code !== 'PGRST116') {
      // Only log error if it's not "no rows found" (table might not exist yet)
      console.error('Error fetching cards:', error);
    }

    setCards(cardsData ?? []);
    setLoading(false);
  };

  const maskCardNumber = (cardNumber: string, show: boolean) => {
    if (show) return cardNumber.match(/.{1,4}/g)?.join(' ') || cardNumber;
    return `**** **** **** ${cardNumber.slice(-4)}`;
  };

  const toggleCardNumber = (cardId: string) => {
    setShowCardNumbers((prev) => ({
      ...prev,
      [cardId]: !prev[cardId],
    }));
  };

  const handleRequestCard = async () => {
    if (!selectedCardType) return;

    setRequesting(true);

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        toast({
          title: 'Error',
          description: 'Please log in to request a card.',
          variant: 'destructive',
        });
        setRequesting(false);
        return;
      }

      // Get user's checking account for debit/credit cards
      const { data: accounts } = await supabase
        .from('accounts')
        .select('id')
        .eq('user_id', user.id)
        .eq('account_type', 'checking')
        .limit(1)
        .single();

      // Insert card request (card details auto-generated by trigger)
      const { error: insertError } = await supabase.from('cards').insert({
        user_id: user.id,
        account_id: accounts?.id || null,
        card_type: selectedCardType,
        status: 'active',
        card_number: null, // Will be auto-generated
        expiry_date: null, // Will be auto-generated
        cvv: null, // Will be auto-generated
      });

      if (insertError) {
        console.error('Error creating card:', insertError);
        toast({
          title: 'Request failed',
          description:
            insertError.message || 'Could not create card. Please try again.',
          variant: 'destructive',
        });
      } else {
        toast({
          title: 'Card created successfully',
          description: `Your physical ${selectedCardType} card has been created and will be shipped within 5-7 business days.`,
        });

        setRequestDialogOpen(false);
        setSelectedCardType(null);

        // Reload cards to show new card
        await loadCards();
      }
    } catch (err) {
      console.error('Request error:', err);
      toast({
        title: 'Error',
        description: 'Something went wrong. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setRequesting(false);
    }
  };

  if (loading) return null;

  return (
    <>
      <DashboardNav />
      <div className="mx-auto w-full max-w-7xl px-6 py-8 md:py-12">
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-2xl md:text-3xl font-semibold tracking-tight">
              My Cards
            </h1>
            <p className="text-sm text-muted-foreground mt-1">
              Manage your debit and credit cards
            </p>
          </div>
          <Button onClick={() => setRequestDialogOpen(true)}>
            <Plus className="mr-2 h-4 w-4" />
            Request New Card
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {cards.map((card) => {
            // Teal gradient colors based on card type
            let gradientClass = '';
            if (card.card_type === 'prepaid') {
              gradientClass = 'bg-gradient-to-br from-teal-600 to-teal-700';
            } else if (card.card_type === 'debit') {
              gradientClass = 'bg-gradient-to-br from-teal-700 to-teal-800';
            } else if (card.card_type === 'credit') {
              gradientClass = 'bg-gradient-to-br from-teal-800 to-teal-900';
            }

            return (
              <Card
                key={card.id}
                className={`relative overflow-hidden ${gradientClass} text-white`}
              >
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-2">
                      {/* Fortiz Logo */}
                      <div className="h-8 w-8 rounded bg-white/20 flex items-center justify-center">
                        <span className="text-white font-bold text-xs">F</span>
                      </div>
                      <div>
                        <CardTitle className="text-white text-sm capitalize">
                          {card.card_type} Card
                        </CardTitle>
                        <CardDescription className="text-white/80 text-xs mt-1">
                          Fortiz Bank
                        </CardDescription>
                      </div>
                    </div>
                    <Badge
                      variant={
                        card.status === 'active' ? 'default' : 'secondary'
                      }
                      className="bg-white/20 text-white border-white/30 capitalize"
                    >
                      {card.status}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Card Number */}
                  <div className="flex items-center justify-between">
                    <p className="text-lg font-mono tracking-wider">
                      {maskCardNumber(
                        card.card_number,
                        showCardNumbers[card.id]
                      )}
                    </p>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-white hover:bg-white/10"
                      onClick={() => toggleCardNumber(card.id)}
                    >
                      {showCardNumbers[card.id] ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>

                  {/* Expiry & CVV */}
                  <div className="flex items-center justify-between text-sm">
                    <div>
                      <p className="text-white/70 text-xs">Valid Thru</p>
                      <p className="font-medium">{card.expiry_date}</p>
                    </div>
                    <div>
                      <p className="text-white/70 text-xs">CVV</p>
                      <p className="font-medium font-mono">
                        {showCardNumbers[card.id] ? card.cvv : '***'}
                      </p>
                    </div>
                  </div>

                  <Separator className="bg-white/20" />

                  {/* Actions */}
                  <div className="flex items-center gap-2">
                    <Button
                      variant="secondary"
                      size="sm"
                      className="flex-1 bg-white/20 text-white hover:bg-white/30 border-white/30"
                    >
                      <Lock className="mr-2 h-3 w-3" />
                      Freeze
                    </Button>
                    <Button
                      variant="secondary"
                      size="sm"
                      className="flex-1 bg-white/20 text-white hover:bg-white/30 border-white/30"
                    >
                      Manage
                    </Button>
                  </div>
                </CardContent>
              </Card>
            );
          })}

          {/* Add New Card */}
          <button onClick={() => setRequestDialogOpen(true)} className="w-full">
            <Card className="border-dashed border-2 hover:border-primary hover:bg-accent cursor-pointer transition-colors h-full">
              <CardContent className="flex flex-col items-center justify-center h-full min-h-[280px] text-center">
                <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
                  <Plus className="h-6 w-6 text-primary" />
                </div>
                <h3 className="font-semibold mb-1">Request New Card</h3>
                <p className="text-sm text-muted-foreground">
                  Add a new debit, credit, or prepaid card
                </p>
              </CardContent>
            </Card>
          </button>
        </div>

        {/* Card Management Section */}
        <div className="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Card Controls</CardTitle>
              <CardDescription>Manage card settings</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div className="flex items-center justify-between">
                  <span>Online Purchases</span>
                  <Badge variant="default">Enabled</Badge>
                </div>
                <Separator />
                <div className="flex items-center justify-between">
                  <span>ATM Withdrawals</span>
                  <Badge variant="default">Enabled</Badge>
                </div>
                <Separator />
                <div className="flex items-center justify-between">
                  <span>Contactless</span>
                  <Badge variant="default">Enabled</Badge>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-base">Spending Limits</CardTitle>
              <CardDescription>Daily transaction limits</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-muted-foreground">Daily Limit</span>
                    <span className="font-medium">$5,000</span>
                  </div>
                  <div className="w-full bg-muted rounded-full h-2">
                    <div
                      className="bg-primary h-2 rounded-full"
                      style={{ width: '35%' }}
                    />
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    $1,750 spent today
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-base">Recent Activity</CardTitle>
              <CardDescription>Latest card transactions</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div>
                  <p className="font-medium">Amazon.com</p>
                  <p className="text-xs text-muted-foreground">
                    Today, 2:45 PM
                  </p>
                  <p className="font-medium mt-1">-$89.99</p>
                </div>
                <Separator />
                <div>
                  <p className="font-medium">Starbucks</p>
                  <p className="text-xs text-muted-foreground">
                    Today, 8:30 AM
                  </p>
                  <p className="font-medium mt-1">-$5.75</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Request Physical Card Dialog */}
      <Dialog open={requestDialogOpen} onOpenChange={setRequestDialogOpen}>
        <DialogContent onClose={() => setRequestDialogOpen(false)}>
          <DialogHeader>
            <DialogTitle>Request Physical Card</DialogTitle>
            <DialogDescription>
              Choose the type of physical card you&apos;d like to receive
            </DialogDescription>
          </DialogHeader>

          <div className="py-6 space-y-3">
            {/* Debit Card Option */}
            <button
              onClick={() => setSelectedCardType('debit')}
              className={`w-full p-4 rounded-lg border-2 transition-all text-left ${
                selectedCardType === 'debit'
                  ? 'border-primary bg-primary/5'
                  : 'border-border hover:border-primary/50'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center shrink-0">
                  <CreditCardIcon className="h-5 w-5 text-blue-600" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold mb-1">Physical Debit Card</h3>
                  <p className="text-sm text-muted-foreground">
                    Use for everyday purchases and ATM withdrawals. Free
                    shipping.
                  </p>
                </div>
              </div>
            </button>

            {/* Credit Card Option */}
            <button
              onClick={() => setSelectedCardType('credit')}
              className={`w-full p-4 rounded-lg border-2 transition-all text-left ${
                selectedCardType === 'credit'
                  ? 'border-primary bg-primary/5'
                  : 'border-border hover:border-primary/50'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="h-10 w-10 rounded-full bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center shrink-0">
                  <CreditCardIcon className="h-5 w-5 text-purple-600" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold mb-1">Physical Credit Card</h3>
                  <p className="text-sm text-muted-foreground">
                    Build credit and earn rewards. Subject to approval.
                  </p>
                </div>
              </div>
            </button>

            {/* Prepaid Card Option */}
            <button
              onClick={() => setSelectedCardType('prepaid')}
              className={`w-full p-4 rounded-lg border-2 transition-all text-left ${
                selectedCardType === 'prepaid'
                  ? 'border-primary bg-primary/5'
                  : 'border-border hover:border-primary/50'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="h-10 w-10 rounded-full bg-green-100 dark:bg-green-900/20 flex items-center justify-center shrink-0">
                  <Wallet className="h-5 w-5 text-green-600" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold mb-1">Physical Prepaid Card</h3>
                  <p className="text-sm text-muted-foreground">
                    Load funds in advance. Perfect for budgeting and gifts.
                  </p>
                </div>
              </div>
            </button>
          </div>

          <div className="bg-muted rounded-lg p-4 mb-4">
            <div className="flex items-start gap-2">
              <Send className="h-4 w-4 text-muted-foreground mt-0.5" />
              <div className="text-sm">
                <p className="font-medium mb-1">Shipping Information</p>
                <p className="text-muted-foreground">
                  Your physical card will be shipped to your registered address.
                  Delivery takes 5-7 business days.
                </p>
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setRequestDialogOpen(false);
                setSelectedCardType(null);
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={handleRequestCard}
              disabled={!selectedCardType || requesting}
            >
              {requesting ? 'Requesting...' : 'Request Card'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
